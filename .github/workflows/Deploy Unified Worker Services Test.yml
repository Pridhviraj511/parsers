name: Test - Worker Service Action
run-name: Test - Deploy Worker ${{ github.event.inputs.choice }} by @${{ github.actor }}
on:
  workflow_dispatch:
    inputs:
      choice:
        type: choice
        description: Choose which parser or service to deploy
        options:
        - hibrid-monitor
        - historical
        - manager
        - mongo-sink

jobs:
  
  build-image-push-to-ecr-and-push-to-ecs:
    
    name: Checkout code build docker image and push to ecr.
    runs-on: ubuntu-latest
   
    steps:

    - name: Check out code in repository.
      uses: actions/checkout@v2

    - name: Configure AWS credentials for login.
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.STG_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.STG_AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
        
    - name: Login to Amazon ECR.
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR.
      id: build-image
      env:
        ECR_REGISTRY: 071372238513.dkr.ecr.eu-west-1.amazonaws.com
        ECR_REPOSITORY: test-${{ github.event.inputs.choice }}
        IMAGE_TAG: $GITHUB_RUN_NUMBER
      run: |
        docker build --build-arg Parser_Name=${{ github.event.inputs.choice }} . -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_RUN_NUMBER -f Dockerfile 
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_RUN_NUMBER
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_RUN_NUMBER"
        
    - name: Configure AWS credentials for login.
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.STG_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.STG_AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: test-ecs-tasks/task-defenition_${{ github.event.inputs.choice }}.json
        container-name: test-${{ github.event.inputs.choice }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: test-${{ github.event.inputs.choice }}-service
        cluster: test-ecs-cluster
        wait-for-service-stability: true
   
  notify-deployment:
    
    name: Notify deployment on teams in github channel.
    runs-on: ubuntu-latest
    needs: build-image-push-to-ecr-and-push-to-ecs
    
    steps:       
    - uses: toko-bifrost/ms-teams-deploy-card@master #  or "./" if in a local set-up
      if: always()
      with:
        github-token: ${{ github.token }}
        webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
