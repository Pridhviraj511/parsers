pipeline {
    agent {
      label 'JenkinsDockerAgent'
}
parameters {
  gitParameter branch: '', branchFilter: 'origin/(.*)', defaultValue: 'main', description: 'select branch', name: 'BRANCH', type: 'PT_BRANCH', useRepository: 'https://github.com/oddsandmore/hybrid-parser.git'
}
    
stages {
    stage('Clone Repository for testing stage') {
      steps {
        git branch: "${params.BRANCH}", credentialsId: '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', url: 'https://github.com/oddsandmore/hybrid-parser.git'
      }
}

 stage('Deploy on AWS through Code Deploy on main branch') {
    when {
      branch "main" 
      }
     steps {
        step([$class: 'AWSCodeDeployPublisher', applicationName: 'OM-stg-pyt-eurobet', awsAccessKey: '', awsSecretKey: '', credentials: 'awsAccessKey', deploymentGroupAppspec: false, deploymentGroupName: 'om-stg-pyt-eurobet-DG', deploymentMethod: 'deploy',deploymentConfig: 'CodeDeployDefault.OneAtATime', excludes: '', iamRoleArn: '', includes: '**', proxyHost: '', proxyPort: 0, region: 'eu-west-1', s3bucket: 'om-backoffice-web-deployment-bucket', s3prefix: 'eurobet', subdirectory: '', versionFileName: '', waitForCompletion: true])
     } 
     
    } 
}
    

    
   /* stage('Deploy on AWS through Code Deploy on ER branch') {
    when {
      branch "eurobet" 
      }
     steps {
        step([$class: 'AWSCodeDeployPublisher', applicationName: 'OM-stg-pyt-eurobet', awsAccessKey: '', awsSecretKey: '', credentials: 'awsAccessKey', deploymentGroupAppspec: false, deploymentGroupName: 'om-stg-pyt-eurobet-DG', deploymentMethod: 'deploy',deploymentConfig: 'CodeDeployDefault.OneAtATime', excludes: '', iamRoleArn: '', includes: '**', proxyHost: '', proxyPort: 0, region: 'eu-west-1', s3bucket: 'om-backoffice-web-deployment-bucket', s3prefix: 'eurobet', subdirectory: '', versionFileName: '', waitForCompletion: true])
     } 
     
    } */
}
